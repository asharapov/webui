package org.echosoft.framework.ui.core;

/**
 * Перечисление всех поддерживаемых фреймворком пространств имен, адресуемых через контекст компонентов.
 *
 * @author Anton Sharapov
 */
public enum Scope {

    /**
     * Предоставляет доступ к параметрам запроса. Каждый параметр представляет собой одно строковое значение.
     */
    PARAMS(true,true),

    /**
     * Предоставляет доступ к параметрам запроса. Каждый параметр представляет собой массив строковых значений.
     * Является расширением простанства имен {@link #PARAMS} для случая когда один параметр может иметь множество значений.
     */
    PARAMSVALUES(true,true),

    /**
     * Предоствляет доступ к атрибутам запроса жизненный цикл которых ограничен временем обработки одного пользовательского
     * запроса на стороне сервера.
     */
    REQUEST(true,false),

    /**
     * Предоставляет доступ к данным, хранящимся в пользовательской сессии на сервере. Время жизни таких данных ограничено временем жизни
     * пользовательской сессии на стороне сервера.
     */
    SESSION(true,false),

    /**
     * Предоставляет доступ к данным, использующимся на стороне сервера, но хранящимися на стороне клиента в специальных элементах форм
     * (передаются от запроса к запросу).
     */
    STATE(true,false),

    /**
     * Синтетическое пространство имен к объектам в котором компоненты имеют доступ без каких-либо ограничений.
     * (то есть все те данные что поместил сюда произвольный компонент A будет доступно чтения/изменения и другому произвольному компоненту B).
     */
    SHARED(false,false),

    /**
     * Предоставляет доступ к данным общим для всего приложения в целом.
     */
    APPLICATION(false,false),

    /**
     * Предоставляет доступ к параметрам инициализации приложения.
     */
    INIT(false,true);


    public static final Scope[] PR_ST = {PARAMS, STATE};
    public static final Scope[] PRV_ST = {PARAMSVALUES, STATE};

    private boolean guarded;
    private boolean keepStringsOnly;

    private Scope(boolean guarded, boolean keepStringsOnly) {
        this.guarded = guarded;
        this.keepStringsOnly = keepStringsOnly;
    }

    public boolean isGuarded() {
        return guarded;
    }

    public boolean isKeepStringsOnly() {
        return keepStringsOnly;
    }
}
