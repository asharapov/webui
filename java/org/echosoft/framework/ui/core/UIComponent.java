package org.echosoft.framework.ui.core;

import java.io.Serializable;

import org.echosoft.common.json.JsonWriter;

/**
 * <p>Базовый интерфейс который должны реализовывать все веб компоненты.</p>
 * <strong>Внимание</strong> Экземпляры компонент не являются потокобезопасными и, соответственно, при обработке очередного запроса
 * рекомендуется заново пересоздавать соответствующие экземпляры компонент.
 *
 * @author Anton Sharapov
 */
public interface UIComponent extends Serializable {

    /**
     * <p>Возвращает контекста выполнения, посредством которого компонент взаимодействует с внешним миром.</p>
     * <p>Контекст должен быть установлен для всех компонент <u>до</u> вызова у них метода {@link #invoke(org.echosoft.common.json.JsonWriter)}</p>
     * @return контекста компонента.
     */
    public ComponentContext getContext();

    /**
     * <p>Данный метод вызывается после инициализации требуемых свойств компонента и предназначен для выполнения всей логики работы компонента.
     * Если компоненту для его корректной работы требуется подключение разного рода дополнительных разделяемых рерсурсов то он регистрирует их в
     * соответствующем экземпляре класса {@link org.echosoft.framework.ui.core.Resources} доступном из контекста выполнения.</p>
     * В общем случае действия, выполняемые компонентом при вызове данного метода, включают:
     * <ol>
     *  <li> Получение и анализ параметров запроса поступивших от пользователя.</li>
     *  <li> Определение состояния в котором находится данный компонент и выполнение соответствующих данному состоянию действий.
     *  <li> Генерация контента отображающего данный компонент в определенном состоянии и помещение его в выходной поток.
     * </ol>
     * @param out  выходной поток в который компонент должен вывести свою модель в формате JSON.
     * @throws Exception в случае каких-либо проблем.
     */
    public void invoke(JsonWriter out) throws Exception;
}
