package org.echosoft.framework.ui.core.compiler.xml;

import org.echosoft.common.model.Predicate;
import org.echosoft.framework.ui.core.compiler.ast.Variable;
import org.echosoft.framework.ui.core.compiler.ast.stmt.ASTBlockStmt;
import org.xml.sax.Attributes;

/**
 * @author Anton Sharapov
 */
public interface Tag {

    /**
     * Ссылка на описание родительского тега в исходном xml документе.
     * @return описание родительского тега в исходном xml документе или <code>null</code> если текущий элемент является корневым.
     */
    public Tag getParent();

    /**
     * Идентификатор пространства имен для данного тега.
     * @return Идентификатор пространства имен для данного тега.
     */
    public String getURI();

    /**
     * Полное имя тега. Включает идентификатор адресного пространства и локальное имя тега.
     * @return Полное имя тега. Включает идентификатор адресного пространства и локальное имя тега.
     */
    public String getQName();

    /**
     * Локальное имя тега.
     * @return Локальное имя тега.
     */
    public String getName();

    /**
     * Перечень атрибутов, указанных для данного тега.
     * @return  Перечень атрибутов, указанных для данного тега.
     */
    public Attributes getAttrs();

    /**
     * Обработчик используемый для генерации java кода на основе информации содержащейся в данном теге.
     * @return Обработчик данного тега. Никогда не может быть <code>null</code>.
     */
    public TagHandler getHandler();

    /**
     * Узел синтаксического дерева, под которым будут добавляться узлы, соответствующие дочерним тегам xml.
     * @return Узел синтаксического дерева, под которым будут добавляться узлы, соответствующие дочерним тегам xml.
     */
    public ASTBlockStmt getContainer();

    public void setContainer(ASTBlockStmt container);

    /**
     * Результатом работы абсолютного большинства обработчиков тегов является конструирование какого-либо одного объекта
     * некоторого класса и последующая установка его свойств, т.е. фрагмент исходного .xml файла
     * <pre>
     *   &lt;my-class id="ref" a="..." b="..."&gt; ... &lt;/my-class&gt;
     * </pre>
     * будет транслирован в соответствующий фрагмент .java файла:
     * <pre>
     *  MyClass ref = new MyClass();
     *  ref.setA(...);
     *  ref.setB(...)
     *  ...
     * </pre>
     * <p>Очень часто, дочерние нижележащие элементы в исходном xml дереве используются для продолжения установки свойств
     * объекта, сконструированного обработчиком родительского тега. В этих целях мы выносим в описание тега краткую информацию
     * о том какой java объект был сконструирован обработчиком данного тега чтобы этим могли воспользоваться обработчики
     * дочерних тегов.</p><br/>
     * <p>Если обработчик тега не конструировал никаких новых java объектов то данное поле останется равным null
     * (пример: группа тегов описывающих различные управляющие инструкции java, такие как <code>if</code>, <code>for</code>,
     * <code>while</code>).</p><br/>
     * <p>Если обработчик тега в ходе своей работы объявил в транслируемом java файле несколько переменных которые
     * потенциально могут представлять интерес для обработчиков дочерних тегов то следует либо воспользоваться свойством
     * {@link #getData()} либо создать новый класс-дескриптор тегов унаследовав его от данного класса.
     * </p>
     * @return информация о переменной в транслируемом .java файле, в которой содержится ссылка на объект,
     * созданный и, вероятно, инициализированный в рамках выполнения обработчика данного тега. Данная ссылка должна быть доступна в контексте,
     * в котором будут инициализироваться все дочерние компоненты для данного компонента.
     */
    public Variable getBean();

    public void setBean(Variable bean);


    /**
     * Ссылка на переменную в java коде, в которой хранится контекст компонента, породившего данный компонент</br>
     * Именно от этого котекста наследуются контексты все дочерних компонент.
     * @return описывает имя переменной, содержащей контекст компонента породившего данный компонент. Данная ссылка должна быть доступна в контексте,
     * в котором будут инициализироваться все дочерние компоненты для данного компонента.
     */
    public Variable getContext();

    void setContext(Variable context);

    /**
     * Использование данного поля никак не регламентировано на данном этапе.
     * Разработчики новых обработчиков тегов вольны использовать данное свойство на свое усмотрение.
     * @return разработчики тегов могут использовать данное свойство произвольным образом.
     */
    public Object getData();

    public void setData(Object data);


    /**
     * Осуществляет поиск ближайшего родительского тега который удовлетворяет заданным в аргументе условиям.
     * @param predicate  условия поиска.
     * @return ближайший тег, удовлетворяющий условиям поиска, или <code>null</code> если ни один тег не
     *          удовлетворяет заданным условиям.
     */
    public Tag findParent(Predicate<Tag> predicate);

}
