package org.echosoft.framework.ui.core.theme;

import java.io.InputStream;

import org.echosoft.common.model.Version;

/**
 * <p>
 * Интерфейс <code>Theme</code> объявляет набор методов предназначенных для работы с ресурсами, относящимися строго к определенной теме.
 * К таковым ресурсам относятся:
 * <ul>
 *  <li> Локализованные сообщения.
 *  <li> Свойства темы (имеют вид "ключ" - "значение", причем значения могут иметь разные значения в зависимости от локали).
 *  <li> Любые файлы так или иначе использующиеся при формировании пользовательских страниц. Как правило это файлы с изображениями, таблицами стилей, скриптами Javascript и т.п.
 * </ul>
 * Каждая тема характеризуется логическим именем и номером версии. Допускается ситуация когда в системе зарегистрировано одновременно несколько тем с одним и
 * тем же логическим именем, но в этом случае их номера версии должны отличаться.
 * Способы хранения всех ресурсов задаются в реализации темы. Как правило, ресурсы темы хранятся в одном или нескольких .jar файлах.
 * </p>
 * @author Anton Sharapov
 */
public interface Theme {

    /**
     * Возвращает логическое имя темы.
     * @return  уникальное логическое имя темы.
     */
    public String getName();

    /**
     * Возвращает номер версии данной темы.
     * @return  версия данной темы.
     */
    public Version getVersion();

    /**
     * Возвращает локализованное сообщение для указанного в аргументе идентификатора сообщения.
     * @param key  идентификатор сообщения.
     * @return локализованное сообщение.
     */
    public String getMessage(String key);

    /**
     * Возвращает локализованное сообщение для указанного в аргументе идентификатора сообщения.
     * Если указан непустой список параметров то итоговая строка форматируется путем вызова <code>MessageFormat.format</code>
     * @param key  идентификатор сообщения.
     * @param params массив значений параметров участвующих в формировании итоговой локализованной строки.
     * <code>MessageFormat.format</code> call.
     * @return форматированное локализованное сообщение.
     */
    public String getMessage(String key, Object... params);

    /**
     * Возвращает значение указанного в аргументе свойства темы.
     * @param key  идентификатор свойства темы.
     * @return  значение указанного свойства темы или <code>null</code> если такое свойство не было установлено для данной темы.
     */
    public String getProperty(String key);

    /**
     * Возвращает значение указанного в аргументе свойства темы.
     * @param key  идентификатор свойства темы.
     * @param defaultValue  значение по умолчанию, используемое в том слечае когда указанное в первом аргументе свойство не было установлено для данной темы.
     * @return  значение указанного свойства темы или <code>defaultValue</code> если такое свойство не было установлено для данной темы.
     */
    public String getProperty(String key, String defaultValue);

    /**
     * Возвращает упорядоченный список URL тех javascript файлов темы которые должны быть подключены на <strong>каждую</strong> страницу приложения. 
     * @return упорядоченный список ссылок на те javascript файлы темы, которые должны быть подключены на каждой странице приложения.
     */
    public String[] getGlobalJSFiles();

    /**
     * Возвращает упорядоченный список URL тех .css файлов темы которые должны быть подключены на <strong>каждую</strong> страницу приложения.
     * @return упорядоченный список ссылок на css файлы темы, которые должны быть подключены на каждой странице приложения.
     */
    public String[] getGlobalStylesheets();

    /**
     * Возвращает валидный URL на запрошенный ресурс относящийся к данной теме.
     * @param key некоторый логический путь до требуемого ресурса относительно корневого каталога данной темы..
     * @return корректный URL по которому клиентский браузер сможет получить содержимое требуемого ресурса.
     */
    public String getResourceURL(String key);

    /**
     * Возвращает в потоке содержимое затребованного ресурса темы.
     * @param key  некоторый логический путь до требуемого ресурса относительно корневого каталога данной темы..
     * @return  соответствующий экземпляр <code>java.io.InputStream</code> или <code>null</code> если затребованный ресурс отсутствует в данной теме.
     */
    public InputStream getResourceAsStream(final String key);

}
