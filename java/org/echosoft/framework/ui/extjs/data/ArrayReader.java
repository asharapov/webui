package org.echosoft.framework.ui.extjs.data;

import org.echosoft.common.json.annotate.JsonUseSeriazer;
import org.echosoft.framework.ui.extjs.spi.data.ArrayReaderJsonSerializer;

/**
 * Предназначен для чтения структурированных данных представленных в формате JSON
 * где каждая запись представлена в виде массива из значений ее свойств.
 * в объекты класса <code>Ext.data.Record</code> (ExtJS)
 * @author Anton Sharapov
 */
@JsonUseSeriazer(ArrayReaderJsonSerializer.class)
public class ArrayReader extends DataReader {
    private String root;                    // Свойство содержащее массив записей.
    private String successProperty;         // Свойство содержащее статус выполнения запроса (успешно/неуспешно).
    private String totalProperty;           // Свойство содержащее общее кол-во записей удовлетворяемое данному запросу.
    private Integer idIndex;                // Для каждого массива описывающего отдельно взятую запись задает порядковый номер его элемента содержащего уникальный идентификатор данной записи.

    public ArrayReader() {
        super();
    }
    public ArrayReader(final String... fields) {
        super(fields);
    }

    /**
     * Для объекта описывающего все данные полученные от сервера возвращает имя свойства содержащее
     * массив объектов каждый из которых соответствует одной записи в хранилище данных ExtJS.
     * @return Свойство содержащее массив записей.
     */
    public String getRoot() {
        return root;
    }
    /**
     * Для объекта описывающего все данные полученные от сервера задает имя свойства содержащее
     * массив объектов каждый из которых соответствует одной записи в хранилище данных ExtJS.
     * @param root имя свойства (выражение javascript) содержащее массив всех записей полученных от сервера.
     */
    public void setRoot(final String root) {
        this.root = root;
    }

    /**
     * Для объекта описывающего все данные полученные от сервера возвращает имя свойства содержащее
     * информацию о статусе выполнения данного запроса на сервер (успешно/неуспешно).
     * @return имя свойства содержащее статус данного запроса:
     * <ul>
     *  <li><code>true</code> - запрос выполнен успешно
     *  <li><code>false</code> - запрос выполнен с ошибками.
     * </ul>
     */
    public String getSuccessProperty() {
        return successProperty;
    }
    /**
     * Для объекта описывающего все данные полученные от сервера задает имя свойства содержащее
     * информацию о статусе выполнения данного запроса на сервер (успешно/неуспешно).
     * @param successProperty имя свойства содержащее статус данного запроса:
     * <ul>
     *  <li><code>true</code> - запрос выполнен успешно
     *  <li><code>false</code> - запрос выполнен с ошибками.
     * </ul>
     */
    public void setSuccessProperty(String successProperty) {
        this.successProperty = successProperty;
    }

    /**
     * Для объекта описывающего все данные полученные от сервера возвращает имя свойства содержащее
     * общее количество записей на сервере которые удовлетворяют запросу клиента (в ответ сервер может
     * отправить только часть удовлетворяющих заданным критериям записей).
     * @return имя свойства содержащее общее кол-во записей на сервере удовлетворяющих заданным в запросе критериям.
     */
    public String getTotalProperty() {
        return totalProperty;
    }
    /**
     * Для объекта описывающего все данные полученные от сервера задает имя свойства содержащее
     * общее количество записей на сервере которые удовлетворяют запросу клиента (в ответ сервер может
     * отправить только часть удовлетворяющих заданным критериям записей).
     * @param totalProperty имя свойства содержащее общее кол-во записей на сервере удовлетворяющих заданным в запросе критериям.
     */
    public void setTotalProperty(String totalProperty) {
        this.totalProperty = totalProperty;
    }

    /**
     * Для каждого массива описывающего отдельно взятую запись возвращает порядковый номер его элемента
     * содержащего уникальный идентификатор данной записи.
     * @return порядковый номер элемента для массива (описывающего отдельную запись) в котором хранится
     * уникальный идентификатор данной записи.
     */
    public Integer getIdIndex() {
        return idIndex;
    }
    /**
     * Для каждого массива описывающего отдельно взятую запись задает порядковый номер его элемента
     * содержащего уникальный идентификатор данной записи.
     * @param idIndex порядковый номер элемента для массива (описывающего отдельную запись) в котором хранится
     * уникальный идентификатор данной записи.
     */
    public void setIdIndex(Integer idIndex) {
        this.idIndex = idIndex;
    }

}